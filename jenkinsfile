pipeline {
    agent any

    // Define tools and environment variables
    tools {
        jdk 'jdk17'
        nodejs 'node16'
    }

    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }

    parameters {
        string(name: 'DOCKER_IMAGE_TAG', defaultValue: 'latest', description: 'Docker image tag to use')
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout from Git') {
            steps {
                sh 'echo "Passed"'
                git branch: 'main', url: 'https://github.com/iammasanam/Netflix'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh "$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Netflix -Dsonar.projectKey=Netflix"
                }
            }
        }

        stage("quality gate") {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'Sonar-token', task: 'AYyC8ynLQahYKj8PkQ5T'
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                sh "npm install"
            }
        }

        stage('OWASP FS SCAN') {
            steps {
                dependencyCheck additionalArguments: '--scan . --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }

        stage('TRIVY FS SCAN') {
            steps {
                sh "trivy fs . > trivyfs.txt"
            }
        }

        stage('Stop and Remove Docker Container') {
            steps {
                script {
                    def containerName = "netflix"

                    def dockerPsOutput = sh(script: 'docker ps -a', returnStdout: true).trim()
                    def containerId = dockerPsOutput.tokenize('\n').find { it.contains(containerName) }?.tokenize()[0]
                    if (containerId) {
                        sh "docker stop $containerId"
                        echo "Container with ID $containerId stopped successfully."
                        sh "docker rm -f $containerId"
                        echo "Container with ID $containerId removed permanently."
                    } else {
                        echo "Container not found or already stopped."
                    }

                    def dockerImagesOutput = sh(script: "docker images -q srikanth2008/netflix:${BUILD_NUMBER}", returnStdout: true).trim()
                    if (dockerImagesOutput) {
                        sh "docker rmi -f $dockerImagesOutput"
                        echo "Docker Images removed"
                    } else {
                        echo "No Docker Images found"
                    }
                }
            }
        }

        stage("Docker Build & Push") {
            environment {
                DOCKER_IMAGE = "srikanth2008/netflix:${BUILD_NUMBER}"
            }
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                        sh "docker build --build-arg TMDB_V3_API_KEY=2cca4d2a9091873a6e794133508785b9 -t ${DOCKER_IMAGE} ."
                        sh "docker tag ${DOCKER_IMAGE} srikanth2008/netflix:${BUILD_NUMBER}"
                        sh "docker push srikanth2008/netflix:${BUILD_NUMBER}"
                        sh "docker rmi ${DOCKER_IMAGE}"
                    }
                }
            }
        }

        stage('TRIVY') {
            steps {
                sh "trivy image srikanth2008/netflix:${BUILD_NUMBER} > trivyimage.txt"
            }
        }

        stage('Deploy to container') {
            steps {
                sh "docker run -d -p 8081:80 --name netflix srikanth2008/netflix:${BUILD_NUMBER}"
            }
        }

        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "Netflix"
                GIT_USER_NAME = "iammasanam"
            }
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    dir('Manifests-Repo') {
                        echo "Updating Deployment File"
                        script {
                            sh '''
                                git pull origin main
                                git config user.email "masanamsrikanth7@gmail.com"
                                git config user.name "iammasanam"
                                sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" deployment.yml
                                git add deployment.yml
                                git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                                git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                            '''
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            emailext attachLog: true,
                    subject: "'${currentBuild.result}'",
                    body: "Project: ${env.JOB_NAME}<br/>" +
                            "Build Number: ${env.BUILD_NUMBER}<br/>" +
                            "URL: ${env.BUILD_URL}<br/>",
                    to: 'srikanthdevops97@gmail.com',
                    attachmentsPattern: 'trivyfs.txt,trivyimage.txt'
        }
    }
}
